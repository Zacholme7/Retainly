What is the idea behind all of this?
-------------------------------------
- have a client, a server, and common
- want something that will implement spaced reptition for flashcards
  - https://ncase.me/remember/
- what are all of the functions
client
- will run on the host machine
- ill start this out just as a command line thing then move it to a tui eventually
- it will communicate with some server that will contain all the cards and logic for the spaced repetition learning
- the client should have the functionality to add a card, delete a card, modify a card, and try to answer prompts correctly
  - maybe something with card groups/directory structure in a way
- client api...

server
- this will run on an aws server
- the idea behind this is to implement all of the server logic that we need to run the app
- it should communicate with a database that stores all of the card
- it should have the logic for sending which cards need to be reviewed to the client

common
- this is just for common functionality that is going to be used by both the client and the server
- card definitions, errors, etc


- need some way to interact with cards via a id, rather than their name


Api design???
client:
- add_card(term: String, def: String)
  - adds a card to our list of cards
  - will construct the card and then send it over to the webserver
- remove_card(term: String)
  - removes a card from the list of cards
  - will send a message to the webserver with the term we want to remove


server:
- add_card_to_database()..
  - will recieve the message from the client, extract the info, and then add a card to the database





- spaced reptition = testing + time
- leitner box
- all new flashcards start at level 1
  - recommend 5 new cards a day
- when you review a card and get it right, it moves up a leve
- when card gets to max level, it "retires"
- if you review a card and you fail, it goes back to level 1
- if at level 1, you can keep testing yourself on it until it gets right and moves to level 2
- level 1: every 1 day
- level 2: every 2 days
- level 3: every 4 days
- level 4: every 8 days
- level 5: every 16 days
- level 6: every 32 days
- level 7: every 64 days
....
- level 7: every 
- at the end of the day, leave no cards in level 1, test yourself until you can get htem all right


- cards build up at the end of the day, so im going to make it so that the user has to manually "change" the day
- introduces user error but I dont want to review 300 cards in one day

- server maintains some state which is the day
- upon startup, client contacts server through some function like start_learning and this is going to determine what levels need to be reviewed on this day
- this function will then loop through the cards in the levels that we need to review, it should be higher level first then lower level
- if there is a success, we are going to remove the card from the level and move it to the upper level
- if there is a failsure, we are going to -


- need some way to be able to handle exits and other stuff


- type learn to enter "learning mode"
- type exit to exit learning mode
- send message to server asking for card
- server will reply with card
- if answer correct, send to server saying we correclty got the card
- if wrong, say it was incorrect






















































  
